import pandas as pd
from sqlalchemy import create_engine

# PostgreSQL 연결 정보
DB_URI = "postgresql+psycopg2://postgres:7963@127.0.0.1:5432/stock_db"
engine = create_engine(DB_URI)

# 시작 및 끝 날짜 설정
START_DATE = "2024-01-02"
END_DATE = "2024-11-15"

# SQL 쿼리: 전체 분석 데이터 가져오기
query = f"""
SELECT 
    r.날짜,
    r.종목,
    r.종목코드,
    r.증권사,
    r.전문가,
    r.목표주가,
    (SELECT p.종가 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 = r.날짜) AS 추천일_당일종가,
    (목표주가 + 
     (SELECT p.종가 
      FROM public.kor_price p 
      WHERE p.종목코드 = r.종목코드 
        AND p.날짜 = r.날짜)) / 2 AS half_목표주가,
    (SELECT p.종가 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 <= '{END_DATE}' 
     ORDER BY p.날짜 DESC LIMIT 1) AS 현재가,
    (SELECT MAX(p.종가) 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}') AS 추천일_대비_최고가,
    ROUND(CAST((((SELECT MAX(p.종가) 
                  FROM public.kor_price p 
                  WHERE p.종목코드 = r.종목코드 
                    AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}') - 
                 (SELECT p.종가 
                  FROM public.kor_price p 
                  WHERE p.종목코드 = r.종목코드 
                    AND p.날짜 = r.날짜))
                / (SELECT p.종가 
                   FROM public.kor_price p 
                   WHERE p.종목코드 = r.종목코드 
                     AND p.날짜 = r.날짜)) * 100 AS numeric), 1) AS 최고_상승율,
    (SELECT MIN(p.종가) 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}') AS 추천일_대비_최저가,
    ROUND(CAST((((SELECT MIN(p.종가) 
                  FROM public.kor_price p 
                  WHERE p.종목코드 = r.종목코드 
                    AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}') - 
                 (SELECT p.종가 
                  FROM public.kor_price p 
                  WHERE p.종목코드 = r.종목코드 
                    AND p.날짜 = r.날짜))
                / (SELECT p.종가 
                   FROM public.kor_price p 
                   WHERE p.종목코드 = r.종목코드 
                     AND p.날짜 = r.날짜)) * 100 AS numeric), 1) AS 최저_하락율,
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM public.kor_price p 
            WHERE p.종목코드 = r.종목코드 
              AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}'
              AND p.종가 >= r.목표주가
        ) THEN '달성'
        ELSE '미달성'
    END AS 목표달성여부,
    (SELECT MIN(p.날짜) 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}' 
       AND p.종가 >= r.목표주가) AS 목표달성일,
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM public.kor_price p 
            WHERE p.종목코드 = r.종목코드 
              AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}'
              AND p.종가 >= (목표주가 + 
                             (SELECT p.종가 
                              FROM public.kor_price p 
                              WHERE p.종목코드 = r.종목코드 
                                AND p.날짜 = r.날짜)) / 2
        ) THEN '달성'
        ELSE '미달성'
    END AS half_달성여부,
    (SELECT MIN(p.날짜) 
     FROM public.kor_price p 
     WHERE p.종목코드 = r.종목코드 
       AND p.날짜 BETWEEN r.날짜 AND '{END_DATE}' 
       AND p.종가 >= (목표주가 + 
                      (SELECT p.종가 
                       FROM public.kor_price p 
                       WHERE p.종목코드 = r.종목코드 
                         AND p.날짜 = r.날짜)) / 2) AS half_달성날짜
FROM public.kor_report r
WHERE r.날짜 BETWEEN '{START_DATE}' AND '{END_DATE}';
"""

# 데이터프레임 생성
df = pd.read_sql_query(query, con=engine)

# 전체 데이터 저장
df.to_csv("Kor_Report_with_Analysis.csv", index=False, encoding="utf-8-sig")
print("전체 데이터 저장 완료: Kor_Report_with_Analysis.csv")

# 성공률 계산 함수
def calculate_success_rate(group, column):
    total = len(group)
    achieved = (group[column] == "달성").sum()
    return round(achieved / total * 100, 1)

# 증권사별 분석
broker_analysis = df.groupby("증권사").agg(
    추천_종목_수=("종목", "count"),
    목표_달성률=("종목", lambda x: calculate_success_rate(df.loc[x.index], "목표달성여부")),
    목표_달성률_Half_달성포함=("종목", lambda x: calculate_success_rate(df.loc[x.index], "half_달성여부")),
    평균_최고_상승율=("최고_상승율", "mean"),
    평균_최저_하락율=("최저_하락율", "mean"),
).reset_index()

# 전문가별 분석
expert_analysis = df.groupby("전문가").agg(
    추천_종목_수=("종목", "count"),
    목표_달성률=("종목", lambda x: calculate_success_rate(df.loc[x.index], "목표달성여부")),
    목표_달성률_Half_달성포함=("종목", lambda x: calculate_success_rate(df.loc[x.index], "half_달성여부")),
    평균_최고_상승율=("최고_상승율", "mean"),
    평균_최저_하락율=("최저_하락율", "mean"),
).reset_index()

# 분석 결과 저장
broker_analysis.to_csv("Broker_Analysis.csv", index=False, encoding="utf-8-sig")
expert_analysis.to_csv("Expert_Analysis.csv", index=False, encoding="utf-8-sig")

print("증권사별 분석 저장 완료: Broker_Analysis.csv")
print("전문가별 분석 저장 완료: Expert_Analysis.csv")

df['날짜'] = pd.to_datetime(df['날짜'])

# 주차(Week)별 추천수 계산
df['추천주차'] = df['날짜'].dt.to_period('W')  # 날짜를 주차별(YYYY-WW)로 변환

# "주차" 열 추가
df['주차'] = df['추천주차'].apply(lambda x: f"W{int(x.start_time.strftime('%U')) + 1}")  # 주차 번호 계산

weekly_recommendations = df.groupby(['추천주차', '주차', '종목']).size().reset_index(name='추천수')
weekly_recommendations = weekly_recommendations.sort_values(['추천주차', '추천수'], ascending=[True, False])

# 주차별 데이터 저장
weekly_recommendations.to_csv("Weekly_Recommendations.csv", index=False, encoding="utf-8-sig")
print("주차별 추천수 저장 완료: Weekly_Recommendations.csv")

# 월별 추천수 계산
df['추천월'] = df['날짜'].dt.to_period('M')  # 날짜를 연월(YYYY-MM)로 변환
monthly_recommendations = df.groupby(['추천월', '종목']).size().reset_index(name='추천수')
monthly_recommendations = monthly_recommendations.sort_values(['추천월', '추천수'], ascending=[True, False])

# 월별 데이터 저장
monthly_recommendations.to_csv("Monthly_Recommendations.csv", index=False, encoding="utf-8-sig")
print("월별 추천수 저장 완료: Monthly_Recommendations.csv")
